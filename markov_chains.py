# -*- coding: utf-8 -*-
"""markov_chains.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mjm50nvxCzzo9FkVd6XHHsbvczFckv-3
"""

import random
from collections import defaultdict

def build_markov_chain(text, chain_length):
    words = text.split()
    chain = defaultdict(list)

    for i in range(len(words) - chain_length):
        key = tuple(words[i:i + chain_length])
        chain[key].append(words[i + chain_length])

    return chain

def generate(filename: str, start_words: list[str], chain_length: int, num_generated: int) -> str:
    with open(filename, 'r') as file:
        text = file.read()

    markov_chain = build_markov_chain(text, chain_length)

    # Initialize the generated sentence with the provided start words
    generated_sentence = list(start_words)

    # Generate the rest of the sentence
    while len(generated_sentence) < num_generated:
        current_state = tuple(generated_sentence[-chain_length:])
        next_word_options = markov_chain.get(current_state, [])
        if next_word_options:
            next_word = random.choice(next_word_options)
            generated_sentence.append(next_word)
        else:
            # If no next word found, break the loop
            break

    return ' '.join(generated_sentence)

# Example usage:
filename = 'example.txt.txt'
start_words = ['The', 'quick']
chain_length = 2
num_generated = 10
generated_sentence = generate(filename, start_words, chain_length, num_generated)
print(generated_sentence)